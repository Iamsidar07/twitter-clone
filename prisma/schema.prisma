// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  FOLLOW
  LIKE
  COMMENT
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  username          String    @unique
  email             String    @unique
  bio               String?
  emailVerified     DateTime?
  image             String?
  profileImage      String?
  coverImage        String?
  hashedPassword    String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  followingIds      String[]  @db.ObjectId
  hashNotifications Boolean?

  posts         Post[]
  notifications Notification[]
  comments      Comment[]
  bookmarks     Bookmark[]
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  body         String
  imageContent String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likedIds     String[] @db.ObjectId
  bookmarkIds  String[] @db.ObjectId
  userId       String   @db.ObjectId

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  bookmark Bookmark[]
}

model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  type         Type
  userId       String   @db.ObjectId
  senderUserId String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [senderUserId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
